scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - (tea + 2*scone)*discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + total_with_discount*sales_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - (tea + 2*scone)*discount
print(total_with_discount)
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + total_with_discount*sales_tax
print(total_after_tax)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[earthquakes > 6.5]
#5 - NOT SOLOVED
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
change_year <- function(date_as_string, "2007") {
new_date <- substr(date_as_string, 5, (last = 10))
paste("2007",date_as_string)
}
substr(date_as_string, 5, (last = 10))
#1
my_age <- 19
#2
my_name <- "Evelyn"
#3
make_introduction <- function(my_name, my_age) {
greeting <- paste("Hello, my name is", my_name, "and I am", my_age, "years old.")
print(greeting)
}
make_introduction(my_name, my_age)
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
#6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#1
books <- c("1984", "Chronicle of a Death Foretold", "The 6th Extinction", "The Sympathizer", "The Defining Decade", "12 Rules for Life")
print(books)
#2
top_three_books <- books[1:3]
print(top_three_books)
#3
book_reviews <- paste(books, collapse = " is a great read! ")
print(book_reviews)
#4
remove_book <-function(books, index_num ) {
return(books[-(index_num)])
}
#5
books_without_5 <- remove_book(books, 5)
print(books_without_5)
#6
long_titles <- books[str_length(books) > 15]
print(long_titles)
#1
numbers <- seq(1:201)
print(numbers)
#2
squared_numbers <- numbers*numbers
print(squared_numbers)
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
print(squared_median)
#5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#1
spring_break <- as.Date("2020-03-21")
#2
class(spring_break)
#3
today <- as.Date("2020-01-22")
days_to_break <- spring_break - today
print(days_to_break)
#5 - NOT SOLVED
date_as_string <- as.character("2020-01-23")
print(date_as_string)
change_year <- function("2007", date_as_string)
change_year <- function(2007, date_as_string)
new_year <- 2007
change_year <- function(new_year, date_as_string) {
paste(new_year, new_date)
{
paste(new_year, new_date)
paste(new_year, new_date)
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
#1
my_age <- 19
#2
my_name <- "Evelyn"
#3
make_introduction <- function(my_name, my_age) {
greeting <- paste("Hello, my name is", my_name, "and I am", my_age, "years old.")
print(greeting)
}
make_introduction(my_name, my_age)
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
#6
capital_intro <- str_to_title(my_intro)
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
#6
capital_intro <- str_to_title(my_intro)
install.packages("stringr")
library("stringr")
#6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#1
books <- c("1984", "Chronicle of a Death Foretold", "The 6th Extinction", "The Sympathizer", "The Defining Decade", "12 Rules for Life")
print(books)
#2
top_three_books <- books[1:3]
print(top_three_books)
#3
book_reviews <- paste(books, collapse = " is a great read! ")
print(book_reviews)
#4
remove_book <-function(books, index_num ) {
return(books[-(index_num)])
}
#5
books_without_5 <- remove_book(books, 5)
print(books_without_5)
#6
long_titles <- books[str_length(books) > 15]
print(long_titles)
#1
numbers <- seq(1:201)
print(numbers)
#2
squared_numbers <- numbers*numbers
print(squared_numbers)
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
print(squared_median)
#5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#1
spring_break <- as.Date("2020-03-21")
#2
class(spring_break)
#3
today <- as.Date("2020-01-22")
days_to_break <- spring_break - today
print(days_to_break)
new_year <- 2007
change_year <- function(new_year, date_as_string) {
paste(new_year, new_date)
{
paste(new_year, new_date)
#----
date_as_string <- as.character(as.Date("2020-01-23"))
print date_as_string
#----
date_as_string <- as.character("2020-01-23")
print date_as_string
#----
date_as_string <- as.character(as.Date("2020-01-23"))
print(date_as_string)
substr(date_as_string, first, last = 4)
?substr
substr(date_as_string, start, stop)
substr(date_as_string, start, stop)
substr(date_as_string, 2, 0)
substr(date_as_string, 1, 4)
substr(date_as_string, 5, 10)
paste("2007", substr(date_as_string, 5, 10))
paste("2007",substr(date_as_string, 5, 10))
paste0("2007",substr(date_as_string, 5, 10))
change_year <- function(2007, date_as_string) {
substr(date_as_string, 5, 10)
paste0("2007",substr(date_as_string, 5, 10))
}
return("2007",substr(date_as_string, 5, 10))
change_year <- function(2007, new_date) {
new_date <- substr(date_as_string, 5, 10)
paste0("2007",substr(date_as_string, 5, 10))
}
change_year <- function(2007, new_date){
new_date <- substr(date_as_string, 5, 10)
paste0("2007",substr(date_as_string, 5, 10))
}
change_year <- function(2007, new_date){
change_year <- function(new_year, date_as_string) {
new_date <- substr(date_as_string, 5, 10)
paste0(new_year,substr(date_as_string, 5, 10))
}
paste0(new_year,substr(date_as_string, 5, 10))
change_year <- function(2007, date_as_string) {
new_date <- substr(date_as_string, 5, 10)
paste0(2007,substr(date_as_string, 5, 10))
}
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#2
class(spring_break)
#----
date_as_string <- as.character(as.Date("2020-01-23"))
print(date_as_string)
class(date_as_string)
change_year <- function("2007", "2020-01-23") {
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
paste0("2007", new_date)
}
change_year <- function("2007", "2020-01-23") {
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
new_year <- paste0("2007", new_date)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
}
#6
spring_break_2025 <- change_year(spring_break, 2025)
change_year <- function("2007", "2020-01-23") {
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
new_year <- paste0("2007", new_date)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
}
change_year <- function("2007", "2020-01-23") {
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
new_year <- paste0("2007", new_date)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
}
#----
date_as_string <- as.character(as.Date("2020-01-23"))
print(date_as_string)
class(date_as_string)
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
new_year <- paste0("2007", new_date)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
change_year <-function("2007","2020-01-23"){
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
new_year <- paste0("2007", new_date)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
}
change_year <-function("2007","2020-01-23"){
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
new_year <- paste0("2007", new_date)
new_year_as_string <- as.Date(new_year)
return(new_year_as_string)
}
date_as_string <- as.character(as.Date("2020-01-23"))
new_date <- substr(date_as_string, 5, 10)
new_year <- paste0("2007", new_date)
new_year_as_string <- as.Date(new_year)
paste(new_year_as_string)
class(new_year_as_string)
change_year <- function(date_type, year){
date_as_string <- as.character(date_type)
without_year <- substr(date_as_string,5,10)
new_year_as_string <- paste0(year, without_year)
new_year_as_date <- as.Date(new_year_as_string)
return(new_year_as_date)
}
change_year(spring_break, 2025)
change_year <- function(date_type, year){
date_as_string <- as.character(date_type)
date_without_year <- substr(date_as_string, 5, 10)
new_date_as_string <- paste0(year, date_without_year)
new_date_as_date <- as.Date(new_date_as_string)
return(new_date_as_date)
}
change_year(spring_break, 2025)
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7 -NOT SOLVED
date_has_passed <- function(Date-type) {
}
#1
spring_break <- as.Date("2020-03-21")
#2
class(spring_break)
#3
today <- as.Date("2020-01-22")
days_to_break <- spring_break - today
print(days_to_break)
#5
change_year <- function(date_type, year){
date_as_string <- as.character(date_type)
date_without_year <- substr(date_as_string, 5, 10)
new_date_as_string <- paste0(year, date_without_year)
new_date_as_date <- as.Date(new_date_as_string)
return(new_date_as_date)
}
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7 -NOT SOLVED
date_has_passed <- function(date_type) {
current_date <- "2020-01-22"
(date_type - current_date) > 0
}
#8
date_has_passed(as.Date("2020-01-23"))
#8
date_has_passed("2020-01-23")
#7 -NOT SOLVED
date_has_passed <- function(date_type) {
current_date <- as.Date("2020-01-22")
(date_type - current_date) > 0
}
#8
date_has_passed("2020-01-23")
date_has_passed(as.Date("2020-01-23"))
#7 -NOT SOLVED
date_has_passed <- function(date_type) {
current_date <- as.Date("2020-01-22")
(current_date - date_type) > 0
}
date_has_passed(as.Date("2020-01-23"))
#9
birthdays <- list(Mom = as.Date("1977-03-14"), Brother = as.Date("2003-08-02"), Me = as.Date("2000-03-15"))
print(birthdays)
get_next_birthday <- function(date_type) {
change_year(date_type, 2020)
date_has_passed(date_type)
if TRUE change_year(date_type, 2021)
return(change_year(date_type, 2020))
}
#1
my_age <- 19
#2
my_name <- "Evelyn"
#3
make_introduction <- function(my_name, my_age) {
greeting <- paste("Hello, my name is", my_name, "and I am", my_age, "years old.")
print(greeting)
}
make_introduction(my_name, my_age)
#4
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
#6
capital_intro <- str_to_title(my_intro)
#5
casual_intro <- sub("Hello, my name is", "Hey I'm", my_intro)
print(casual_intro)
install.packages("stringr")
library("stringr")
#6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#6
capital_intro <- str_to_title(my_intro)
print(capital_intro)
#7
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#1
books <- c("1984", "Chronicle of a Death Foretold", "The 6th Extinction", "The Sympathizer", "The Defining Decade", "12 Rules for Life")
print(books)
#2
top_three_books <- books[1:3]
print(top_three_books)
#3
book_reviews <- paste(books, collapse = " is a great read! ")
print(book_reviews)
#4
remove_book <-function(books, index_num ) {
return(books[-(index_num)])
}
#5
books_without_5 <- remove_book(books, 5)
print(books_without_5)
#6
long_titles <- books[str_length(books) > 15]
print(long_titles)
#1
numbers <- seq(1:201)
print(numbers)
#2
squared_numbers <- numbers*numbers
print(squared_numbers)
#3
squared_mean <- mean(squared_numbers)
print(squared_mean)
#4
squared_median <- median(squared_numbers)
print(squared_median)
#5
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#1
spring_break <- as.Date("2020-03-21")
#2
class(spring_break)
#3
today <- as.Date("2020-01-22")
days_to_break <- spring_break - today
print(days_to_break)
#5
change_year <- function(date_type, year){
date_as_string <- as.character(date_type)
date_without_year <- substr(date_as_string, 5, 10)
new_date_as_string <- paste0(year, date_without_year)
new_date_as_date <- as.Date(new_date_as_string)
return(new_date_as_date)
}
#6
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#7
date_has_passed <- function(date_type) {
current_date <- as.Date("2020-01-22")
(current_date - date_type) > 0
}
#8
date_has_passed(as.Date("2020-01-23"))
#9
birthdays <- list(Mom = as.Date("1977-03-14"), Brother = as.Date("2003-08-02"), Me = as.Date("2000-03-15"))
print(birthdays)
#10
get_next_birthday <- function(date_type) {
change_year(date_type, 2020)
date_has_passed(date_type)
if TRUE change_year(date_type, 2021)
return(change_year(date_type, 2020))
}
#10
get_next_birthday <- function(date_type) {
change_year(date_type, 2020)
date_has_passed(date_type)
if(TRUE) {
change_year(date_type, 2021)
}
return(change_year(date_type, 2020))
}
#11
get_next_birthday(birthdays$Me)
#11
get_next_birthday(birthdays$Me)
#12
next_birthdays <- lapply(birthdays,get_next_birthday)
print(next_birthdays)
# load relevant libraries
library("httr")
library("jsonlite")
setwd("~/Desktop/book-exercises2/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") # go to that file, select all, and hit crtl - enter
source('~/Desktop/book-exercises2/book-exercises/chapter-18-exercises/exercise-1/exercise.R')
source('~/Desktop/book-exercises2/book-exercises/chapter-18-exercises/exercise-1/exercise.R')
source('~/Desktop/book-exercises2/book-exercises/chapter-18-exercises/exercise-1/exercise.R')
source('~/Desktop/book-exercises2/book-exercises/chapter-18-exercises/exercise-1/exercise.R')
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R") # go to that file, select all, and hit crtl - enter
query_params <- list("api-key" = nyt_key)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
paste0(base_uri, endpoint)
?source()
source("apikey.R")
print(source("apikey.R"))
print(source("apikey.R"))
source("apikey.R")
